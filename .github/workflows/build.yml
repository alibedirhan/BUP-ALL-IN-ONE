name: Build and Release BupiliC

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: false
        type: string
  push:
    tags:
      - 'v*'
    branches:
      - main
      - develop

env:
  APP_NAME: BupiliC
  PYTHON_VERSION: '3.11'

jobs:
  build-windows:
    name: Build Windows EXE
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: x64

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install pyinstaller==6.3.0
          pip install pillow
          pip install -r requirements.txt

      - name: Create build directory
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path "build" -Force

      - name: Create icon file
        shell: pwsh
        run: |
          python -c "
          from PIL import Image
          import os
          if os.path.exists('icon/bupilic_logo.png'):
              img = Image.open('icon/bupilic_logo.png')
              os.makedirs('build', exist_ok=True)
              img.save('build/app_icon.ico', format='ICO', sizes=[(16,16), (32,32), (48,48), (256,256)])
              print('Icon created successfully')
          else:
              print('Icon file not found')
          "

      - name: Build executable with PyInstaller
        shell: pwsh
        run: |
          Write-Host "Starting PyInstaller build..."
          pyinstaller --noconfirm --clean bupilic.spec
          Write-Host "Build completed"

      - name: Check build output
        shell: pwsh
        run: |
          Write-Host "Checking dist folder contents:"
          if (Test-Path "dist") {
            Get-ChildItem "dist" -Recurse | Select-Object FullName, Length
          } else {
            Write-Host "dist folder not found"
            exit 1
          }

      - name: Test executable exists
        shell: pwsh
        run: |
          $exePath = "dist\${{ env.APP_NAME }}.exe"
          if (Test-Path $exePath) {
            $size = (Get-Item $exePath).Length / 1MB
            Write-Host "SUCCESS: Executable found at $exePath"
            Write-Host "Size: $size MB"
          } else {
            Write-Host "ERROR: Executable not found"
            Get-ChildItem . -Recurse -Filter "*.exe" | Select-Object FullName
            exit 1
          }

      - name: Create release package
        shell: pwsh
        run: |
          $version = if ("${{ github.event.inputs.version }}") { "${{ github.event.inputs.version }}" } else { "v1.0.0" }
          $zipName = "${{ env.APP_NAME }}-$version-windows.zip"
          
          if (Test-Path "dist\${{ env.APP_NAME }}.exe") {
            Compress-Archive -Path "dist\${{ env.APP_NAME }}.exe" -DestinationPath "dist\$zipName" -Force
            Write-Host "Package created: dist\$zipName"
          }

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: BupiliC-Windows
          path: |
            dist/*.exe
            dist/*.zip
          retention-days: 30
          if-no-files-found: error

      - name: Create Release (if tagged)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*.exe
            dist/*.zip
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
