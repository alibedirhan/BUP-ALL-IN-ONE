name: Build and Release BupiliC

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: false
        type: string
  push:
    tags:
      - 'v*'
    branches:
      - main
      - develop

env:
  APP_NAME: BupiliC
  PYTHON_VERSION: '3.11'

jobs:
  build-windows:
    name: Build Windows EXE
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: x64

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install build dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install pyinstaller==6.3.0
          pip install pillow>=10.1.0
          pip install -r requirements.txt

      - name: Check module structure
        shell: pwsh
        run: |
          Write-Host "Checking module structure..."
          $modules = @("ISKONTO_HESABI", "KARLILIK_ANALIZI", "Musteri_Sayisi_Kontrolu", "YASLANDIRMA")
          
          foreach ($module in $modules) {
            if (Test-Path $module) {
              Write-Host "‚úì $module found"
              
              # __init__.py kontrol√º ve olu≈üturma
              $initFile = "$module/__init__.py"
              if (-not (Test-Path $initFile)) {
                Write-Host "Creating $initFile"
                Set-Content -Path $initFile -Value "# $module package"
              }
            } else {
              Write-Error "‚ùå $module not found!"
              exit 1
            }
          }

      - name: Create build directories
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path "build" -Force
          New-Item -ItemType Directory -Path "dist" -Force

      - name: Create icon file
        shell: pwsh
        run: |
          if (Test-Path "icon/bupilic_logo.png") {
            python -c "
            from PIL import Image
            import os
            img = Image.open('icon/bupilic_logo.png')
            os.makedirs('build', exist_ok=True)
            img.save('build/app_icon.ico', format='ICO', sizes=[(16,16), (32,32), (48,48), (64,64), (128,128), (256,256)])
            print('‚úì Icon created successfully')
            "
          } else {
            Write-Warning "Icon file not found, creating placeholder"
            python -c "
            from PIL import Image
            import os
            os.makedirs('build', exist_ok=True)
            img = Image.new('RGBA', (64, 64), (42, 157, 143, 255))
            img.save('build/app_icon.ico', format='ICO')
            print('‚úì Placeholder icon created')
            "
          }

      - name: Ensure runtime hook exists
        shell: pwsh
        run: |
          if (-not (Test-Path "runtime_hook.py")) {
            Write-Host "Creating runtime_hook.py"
            @'
# -*- coding: utf-8 -*-
import sys
import os

def ensure_dependencies():
    """Setup sys.path for frozen executable"""
    if getattr(sys, 'frozen', False):
        bundle_dir = sys._MEIPASS
        
        subdirs = [
            'ISKONTO_HESABI',
            'KARLILIK_ANALIZI', 
            'Musteri_Sayisi_Kontrolu',
            'YASLANDIRMA'
        ]
        
        for subdir in subdirs:
            subdir_path = os.path.join(bundle_dir, subdir)
            if os.path.exists(subdir_path) and subdir_path not in sys.path:
                sys.path.insert(0, subdir_path)

def fix_matplotlib():
    """Fix matplotlib backend for frozen executable"""
    try:
        import matplotlib
        matplotlib.use('Agg')
    except ImportError:
        pass

ensure_dependencies()
fix_matplotlib()
'@ | Out-File -Encoding utf8 "runtime_hook.py"
          }

      - name: Build with PyInstaller
        shell: pwsh
        run: |
          Write-Host "Building with PyInstaller..."
          
          # √ñnce build.py'yi dene
          if (Test-Path "build.py") {
            $version = "${{ github.event.inputs.version }}"
            if (-not $version) { $version = "v1.0.0" }
            python build.py --version "$version" --no-test
          } else {
            # Fallback: Doƒürudan PyInstaller
            pyinstaller --noconfirm --clean --onefile --windowed `
              --icon build/app_icon.ico `
              --add-data "ISKONTO_HESABI;ISKONTO_HESABI" `
              --add-data "KARLILIK_ANALIZI;KARLILIK_ANALIZI" `
              --add-data "Musteri_Sayisi_Kontrolu;Musteri_Sayisi_Kontrolu" `
              --add-data "YASLANDIRMA;YASLANDIRMA" `
              --add-data "icon;icon" `
              --runtime-hook runtime_hook.py `
              --hidden-import "customtkinter" `
              --hidden-import "PIL._tkinter_finder" `
              --hidden-import "pandas" `
              --hidden-import "matplotlib.backends.backend_tkagg" `
              --hidden-import "ISKONTO_HESABI" `
              --hidden-import "KARLILIK_ANALIZI" `
              --hidden-import "Musteri_Sayisi_Kontrolu" `
              --hidden-import "YASLANDIRMA" `
              BUPILIC_ANA_PROGRAM.py
          }

      - name: Verify executable
        shell: pwsh
        run: |
          $exePath = "dist\${{ env.APP_NAME }}.exe"
          if (Test-Path $exePath) {
            $size = (Get-Item $exePath).Length / 1MB
            Write-Host "‚úì SUCCESS: Executable found at $exePath"
            Write-Host "üìä Size: $size MB"
            
            # Basic file check
            $fileInfo = Get-Item $exePath
            Write-Host "üïí Created: $($fileInfo.CreationTime)"
          } else {
            Write-Error "‚ùå Executable not found!"
            Write-Host "Available files in dist:"
            Get-ChildItem "dist" -Recurse | Format-Table Name, Length
            exit 1
          }

      - name: Compress with UPX (optional)
        shell: pwsh
        run: |
          $exePath = "dist\${{ env.APP_NAME }}.exe"
          if (Test-Path $exePath) {
            # UPX'ƒ± dene
            try {
              $originalSize = (Get-Item $exePath).Length
              upx --best --lzma $exePath
              $newSize = (Get-Item $exePath).Length
              $saved = ($originalSize - $newSize) / 1MB
              Write-Host "‚úì UPX compression saved: $saved MB"
            } catch {
              Write-Warning "UPX not available, skipping compression"
            }
          }

      - name: Create release package
        shell: pwsh
        run: |
          $version = "${{ github.event.inputs.version }}"
          if (-not $version) { $version = "v1.0.0" }
          $zipName = "${{ env.APP_NAME }}-$version-windows.zip"
          $exePath = "dist\${{ env.APP_NAME }}.exe"
          
          if (Test-Path $exePath) {
            Compress-Archive -Path $exePath -DestinationPath "dist\$zipName" -Force
            Write-Host "‚úì Package created: dist\$zipName"
            
            # Zip boyutunu g√∂ster
            $zipSize = (Get-Item "dist\$zipName").Length / 1MB
            Write-Host "üì¶ Zip size: $zipSize MB"
          }

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: BupiliC-Windows-Build
          path: |
            dist/*.exe
            dist/*.zip
          retention-days: 7
          if-no-files-found: error

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*.exe
            dist/*.zip
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
