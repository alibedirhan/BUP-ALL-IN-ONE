name: Build & Release BupiliC

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: false
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

  push:
    tags:
      - 'v*'
    branches:
      - main

env:
  APP_NAME: BupiliC
  PYTHON_VERSION: '3.10.11'  # Kesin versiyon
  BUILD_TYPE: release

jobs:
  pre-checks:
    name: Pre-build Validation
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_release: ${{ steps.check.outputs.is_release }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Check files exist
      run: |
        if [ ! -f "BUPILIC_ANA_PROGRAM.py" ]; then 
          echo "ERROR: BUPILIC_ANA_PROGRAM.py not found!"
          exit 1
        fi
        if [ ! -f "requirements.txt" ]; then 
          echo "ERROR: requirements.txt not found!"
          exit 1
        fi
        if [ ! -f "bupilic.spec" ]; then 
          echo "ERROR: bupilic.spec not found!"
          exit 1
        fi
        if [ ! -d "ISKONTO_HESABI" ]; then 
          echo "ERROR: ISKONTO_HESABI directory not found!"
          exit 1
        fi
        if [ ! -d "KARLILIK_ANALIZI" ]; then 
          echo "ERROR: KARLILIK_ANALIZI directory not found!"
          exit 1
        fi
        if [ ! -d "Musteri_Sayisi_Kontrolu" ]; then 
          echo "ERROR: Musteri_Sayisi_Kontrolu directory not found!"
          exit 1
        fi
        if [ ! -d "YASLANDIRMA" ]; then 
          echo "ERROR: YASLANDIRMA directory not found!"
          exit 1
        fi
        echo "SUCCESS: All required files and directories found!"

    - name: Determine version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        elif [[ -n "${{ github.event.inputs.version }}" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="v1.0.0-$(date +'%Y%m%d')-${GITHUB_SHA:0:7}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Release check
      id: check
      run: |
        if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/tags/* ]]; then
          echo "is_release=true" >> $GITHUB_OUTPUT
        else
          echo "is_release=false" >> $GITHUB_OUTPUT
        fi

  build-windows:
    name: Build Windows EXE
    runs-on: windows-latest
    needs: pre-checks
    timeout-minutes: 60
    
    steps:
    - name: Checkout repository  
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install PyInstaller
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller==6.3.0

    - name: Install application dependencies
      run: |
        echo "Installing dependencies from requirements.txt..."
        pip install -r requirements.txt

    - name: Verify key dependencies (no Unicode)
      run: |
        python -c "
        try:
            import pandas as pd
            import numpy as np
            import pdfplumber
            import customtkinter as ctk
            print('SUCCESS: Pandas version:', pd.__version__)
            print('SUCCESS: NumPy version:', np.__version__)
            print('SUCCESS: PDFPlumber imported successfully')
            print('SUCCESS: CustomTkinter imported successfully')
            print('SUCCESS: All key dependencies verified!')
        except Exception as e:
            print('ERROR: Dependency verification failed:', e)
            exit(1)
        "

    # build.yml dosyasında PyInstaller komutunu güncelle:
    - name: Build with PyInstaller
      run: |
        pyinstaller BupiliC.spec --noconfirm --clean

    - name: Check build result
      run: |
        $exePath = "dist\${{ env.APP_NAME }}.exe"
        if (Test-Path $exePath) {
            echo "SUCCESS: Build completed successfully!"
            $fileInfo = Get-Item $exePath
            echo "SUCCESS: Executable created at: $exePath"
            echo "SUCCESS: File size: $($fileInfo.Length) bytes"
            echo "SUCCESS: Build timestamp: $($fileInfo.LastWriteTime)"
        } else {
            echo "ERROR: Build failed - executable not found!"
            echo "ERROR: Expected path: $exePath"
            Get-ChildItem dist -ErrorAction SilentlyContinue
            exit 1
        }

    - name: Package for distribution
      run: |
        $version = "${{ needs.pre-checks.outputs.version }}"
        $exePath = "dist\${{ env.APP_NAME }}.exe"
        $outputName = "${{ env.APP_NAME }}-$version-windows-x64"
        
        if (Test-Path $exePath) {
            # EXE dosyasini kopyala
            Copy-Item $exePath "dist\$outputName.exe"
            
            # ZIP olustur
            Compress-Archive -Path $exePath -DestinationPath "dist\$outputName.zip" -Force
            
            echo "SUCCESS: Package created successfully"
            echo "SUCCESS: EXE: $outputName.exe"
            echo "SUCCESS: ZIP: $outputName.zip"
        } else {
            echo "ERROR: Cannot package - executable not found!"
            exit 1
        }

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: BupiliC-${{ needs.pre-checks.outputs.version }}
        path: |
          dist/*.exe
          dist/*.zip
        retention-days: 30

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [pre-checks, build-windows]
    if: needs.pre-checks.outputs.is_release == 'true'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: List artifacts
      run: |
        echo "Available artifacts:"
        find ./artifacts -type f -name "*.exe" -o -name "*.zip" | head -20

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.pre-checks.outputs.version }}
        name: "BupiliC ${{ needs.pre-checks.outputs.version }}"
        body: |
          ## BupiliC Isletme Yonetim Sistemi ${{ needs.pre-checks.outputs.version }}
          
          ### Ozellikler:
          - Iskonto Hesaplama
          - Karlilik Analizi  
          - Musteri Kayip/Kacak Takibi
          - Yaslandirma Raporlari
          
          ### Kurulum:
          1. BupiliC-*-windows-x64.exe dosyasini indirin
          2. Cift tiklayarak calistirin
          3. Varsayilan sifre: bupilic2024
          
          ### Sistem Gereksinimleri:
          - Windows 10/11 (64-bit)
          - Python gerekmez (tek dosya)
          - Internet baglantisi gerekmez
          
          ### Sorun Giderme:
          - Windows Defender uyarisi cikarsa "Daha fazla bilgi" -> "Yine de calistir"
          - Antivirus yazilimi tarafindan engellenirse istisna listesine ekleyin
        files: ./artifacts/**/*
        prerelease: ${{ github.event.inputs.prerelease || false }}
        draft: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
