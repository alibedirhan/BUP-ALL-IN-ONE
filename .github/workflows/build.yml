name: Build and Release BupiliC

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: false
        type: string
  push:
    tags:
      - 'v*'
    branches:
      - main
      - develop

env:
  APP_NAME: BupiliC
  PYTHON_VERSION: '3.11'

jobs:
  build-windows:
    name: Build Windows EXE
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: x64

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install pyinstaller==6.3.0
          pip install pillow
          pip install -r requirements.txt

      - name: Create build directory
        run: |
          mkdir -p build
          mkdir -p dist

      - name: Create icon file
        run: |
          python -c "
          from PIL import Image
          import os
          if os.path.exists('icon/bupilic_logo.png'):
              img = Image.open('icon/bupilic_logo.png')
              os.makedirs('build', exist_ok=True)
              img.save('build/app_icon.ico', format='ICO', sizes=[(16,16), (32,32), (48,48), (256,256)])
              print('Icon created successfully')
          else:
              print('Icon file not found')
          "

      - name: Create runtime hook
        run: |
          cat > runtime_hook.py << 'EOF'
# -*- coding: utf-8 -*-
import sys
import os

def ensure_dependencies():
    if getattr(sys, 'frozen', False):
        bundle_dir = sys._MEIPASS
        subdirs = [
            'ISKONTO_HESABI',
            'KARLILIK_ANALIZI', 
            'Musteri_Sayisi_Kontrolu',
            'YASLANDIRMA'
        ]
        for subdir in subdirs:
            subdir_path = os.path.join(bundle_dir, subdir)
            if os.path.exists(subdir_path) and subdir_path not in sys.path:
                sys.path.insert(0, subdir_path)

def fix_matplotlib():
    try:
        import matplotlib
        matplotlib.use('Agg')
    except ImportError:
        pass

ensure_dependencies()
fix_matplotlib()
EOF

      - name: Build with PyInstaller
        run: |
          pyinstaller --noconfirm --clean --onefile --windowed \
            --icon build/app_icon.ico \
            --add-data "ISKONTO_HESABI:ISKONTO_HESABI" \
            --add-data "KARLILIK_ANALIZI:KARLILIK_ANALIZI" \
            --add-data "Musteri_Sayisi_Kontrolu:Musteri_Sayisi_Kontrolu" \
            --add-data "YASLANDIRMA:YASLANDIRMA" \
            --add-data "icon:icon" \
            --runtime-hook runtime_hook.py \
            --hidden-import customtkinter \
            --hidden-import PIL._tkinter_finder \
            --hidden-import pandas \
            --hidden-import matplotlib.backends.backend_tkagg \
            --hidden-import ISKONTO_HESABI \
            --hidden-import KARLILIK_ANALIZI \
            --hidden-import Musteri_Sayisi_Kontrolu \
            --hidden-import YASLANDIRMA \
            BUPILIC_ANA_PROGRAM.py

      - name: Verify executable
        run: |
          if [ -f "dist/$APP_NAME.exe" ]; then
            size=$(du -h "dist/$APP_NAME.exe" | cut -f1)
            echo "SUCCESS: Executable found at dist/$APP_NAME.exe"
            echo "Size: $size"
          else
            echo "ERROR: Executable not found"
            ls -la dist/
            exit 1
          fi

      - name: Create release package
        run: |
          version="${{ github.event.inputs.version }}"
          if [ -z "$version" ]; then
            version="v1.0.0"
          fi
          zip_name="${APP_NAME}-${version}-windows.zip"
          zip -r "dist/${zip_name}" "dist/${APP_NAME}.exe"
          echo "Package created: dist/${zip_name}"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: BupiliC-Windows
          path: |
            dist/*.exe
            dist/*.zip
          retention-days: 30

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*.exe
            dist/*.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
