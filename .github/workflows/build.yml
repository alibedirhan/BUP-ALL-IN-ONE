name: üöÄ Build & Release Bupili√á

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: false
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean
  push:
    tags:
      - 'v*'
    branches:
      - main
      - develop

env:
  APP_NAME: BupiliC
  PYTHON_VERSION: '3.11'
  BUILD_TYPE: release

jobs:
  pre-checks:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_release: ${{ steps.check.outputs.is_release }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python (pre-check)
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Check repository structure
        run: |
          echo "üîç Checking critical files..."
          if [ ! -f "BUPILIC_ANA_PROGRAM.py" ]; then echo "‚ùå BUPILIC_ANA_PROGRAM.py not found"; exit 1; fi
          if [ ! -f "requirements.txt" ]; then echo "‚ùå requirements.txt not found"; exit 1; fi
          for d in ISKONTO_HESABI KARLILIK_ANALIZI Musteri_Sayisi_Kontrolu YASLANDIRMA; do
            if [ ! -d "$d" ]; then echo "‚ùå $d directory not found"; exit 1; fi
          done
          echo "‚úÖ All critical files found"

      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ -n "${{ github.event.inputs.version }}" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          elif [[ -f "VERSION" ]]; then
            VERSION="v$(cat VERSION)"
          else
            VERSION="v1.0.0-$(date +'%Y%m%d')-${GITHUB_SHA:0:7}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Release check
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/tags/* ]]; then
            echo "is_release=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.version }}" ]]; then
            echo "is_release=true" >> $GITHUB_OUTPUT
          else
            echo "is_release=false" >> $GITHUB_OUTPUT
          fi

  build-windows:
    name: Build Windows EXE
    runs-on: windows-latest
    needs: pre-checks
    timeout-minutes: 90
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: x64

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt', 'requirements-build.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install build tools and deps
        shell: pwsh
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install pyinstaller==6.3.0
          
          # Install build-time dependencies
          if (Test-Path "requirements-build.txt") {
            pip install -r requirements-build.txt
          }
          
          # Install runtime dependencies
          pip install -r requirements.txt

      - name: Convert PNG to ICO
        shell: pwsh
        run: |
          # Create build directory if not exists
          if (!(Test-Path "build")) {
            New-Item -ItemType Directory -Path "build"
          }
          
          # Check if icon converter exists
          if (Test-Path "build/icon_converter.py") {
            python build/icon_converter.py
          } else {
            # Simple fallback converter
            @"
from PIL import Image
import os

# Convert PNG to ICO
png_path = 'icon/bupilic_logo.png'
ico_path = 'build/app_icon.ico'

if os.path.exists(png_path):
    img = Image.open(png_path)
    img.save(ico_path, format='ICO', sizes=[(16,16), (32,32), (48,48), (64,64), (128,128), (256,256)])
    print(f'Created {ico_path}')
else:
    print(f'PNG not found: {png_path}')
"@ | Out-File -FilePath "build/icon_converter_temp.py" -Encoding UTF8
            python build/icon_converter_temp.py
          }

      - name: Build with PyInstaller
        shell: pwsh
        run: |
          # Spec dosyasƒ±nƒ± kullanarak build et
          $spec = "bupilic.spec"
          
          Write-Host "üî® Building with PyInstaller..."
          Write-Host "Using spec file: $spec"
          
          # Build komutu
          pyinstaller $spec --noconfirm --clean
          
          # Build sonucunu kontrol et
          Write-Host "`nüìÅ Contents of dist folder:"
          if (Test-Path "dist") {
            Get-ChildItem "dist" -Recurse | Select-Object FullName, Length | Format-Table -AutoSize
          }

      - name: Test built executable
        shell: pwsh
        run: |
          # Tek dosya exe kontrol√º
          $exePath = Join-Path -Path "dist" -ChildPath "${{ env.APP_NAME }}.exe"
          
          Write-Host "üîç Looking for executable at: $exePath"
          
          if (Test-Path $exePath) {
            Write-Host "‚úÖ Executable found: $exePath"
            $fileInfo = Get-Item $exePath
            Write-Host "   Size: $($fileInfo.Length / 1MB) MB"
            Write-Host "   Created: $($fileInfo.CreationTime)"
            
            # Dosya boyutu kontrol√º (en az 5MB olmalƒ±)
            if ($fileInfo.Length -lt 5MB) {
              Write-Host "‚ö†Ô∏è Warning: Executable seems too small (< 5MB)"
            }
          } else {
            Write-Host "‚ùå Executable not found at expected location"
            Write-Host "üìÅ Current directory contents:"
            Get-ChildItem -Path . -Recurse -Include *.exe | Select-Object FullName, Length | Format-Table -AutoSize
            exit 1
          }

      - name: Create installer (optional)
        shell: pwsh
        run: |
          # NSIS installer olu≈üturma (opsiyonel)
          $installerScript = @"
!define APP_NAME "BupiliC"
!define APP_VERSION "${{ needs.pre-checks.outputs.version }}"
!define APP_PUBLISHER "Your Company"
!define APP_URL "https://github.com/alibedirhan/BUP-ALL-IN-ONE"

Name "`${APP_NAME}"
OutFile "dist\`${APP_NAME}-`${APP_VERSION}-setup.exe"
InstallDir "`$PROGRAMFILES\`${APP_NAME}"
RequestExecutionLevel admin

Section
  SetOutPath `$INSTDIR
  File "dist\`${APP_NAME}.exe"
  
  CreateDirectory "`$SMPROGRAMS\`${APP_NAME}"
  CreateShortcut "`$SMPROGRAMS\`${APP_NAME}\`${APP_NAME}.lnk" "`$INSTDIR\`${APP_NAME}.exe"
  CreateShortcut "`$DESKTOP\`${APP_NAME}.lnk" "`$INSTDIR\`${APP_NAME}.exe"
  
  WriteUninstaller "`$INSTDIR\uninstall.exe"
  
  WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\`${APP_NAME}" "DisplayName" "`${APP_NAME}"
  WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\`${APP_NAME}" "UninstallString" "`$INSTDIR\uninstall.exe"
SectionEnd

Section "Uninstall"
  Delete "`$INSTDIR\`${APP_NAME}.exe"
  Delete "`$INSTDIR\uninstall.exe"
  RMDir "`$INSTDIR"
  
  Delete "`$SMPROGRAMS\`${APP_NAME}\`${APP_NAME}.lnk"
  RMDir "`$SMPROGRAMS\`${APP_NAME}"
  Delete "`$DESKTOP\`${APP_NAME}.lnk"
  
  DeleteRegKey HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\`${APP_NAME}"
SectionEnd
"@
          
          # NSIS varsa installer olu≈ütur
          if (Get-Command makensis -ErrorAction SilentlyContinue) {
            $installerScript | Out-File -FilePath "installer.nsi" -Encoding UTF8
            makensis installer.nsi
            Write-Host "‚úÖ Installer created"
          } else {
            Write-Host "‚ÑπÔ∏è NSIS not found, skipping installer creation"
          }

      - name: Package artifacts
        shell: pwsh
        run: |
          $version = "${{ needs.pre-checks.outputs.version }}"
          $zipName = "${{ env.APP_NAME }}-$version-windows-x64.zip"
          
          # Ana exe dosyasƒ±nƒ± zipleyeceƒüiz
          $exePath = "dist\${{ env.APP_NAME }}.exe"
          
          if (Test-Path $exePath) {
            # Ge√ßici klas√∂r olu≈ütur
            $tempDir = "dist\package"
            New-Item -ItemType Directory -Path $tempDir -Force
            
            # Exe'yi kopyala
            Copy-Item $exePath -Destination "$tempDir\${{ env.APP_NAME }}.exe"
            
            # README olu≈ütur
            @"
# Bupili√á ƒ∞≈ületme Y√∂netim Sistemi

## Kurulum
1. ${{ env.APP_NAME }}.exe dosyasƒ±nƒ± istediƒüiniz konuma kopyalayƒ±n
2. √áift tƒ±klayarak √ßalƒ±≈ütƒ±rƒ±n

## √ñzellikler
- ƒ∞skonto Hesaplama
- Karlƒ±lƒ±k Analizi
- M√º≈üteri Kayƒ±p/Ka√ßak Analizi
- Ya≈ülandƒ±rma Raporlarƒ±

## Sistem Gereksinimleri
- Windows 7/8/10/11
- 64-bit i≈ületim sistemi
- En az 2GB RAM
- 100MB bo≈ü disk alanƒ±

Versiyon: $version
"@ | Out-File -FilePath "$tempDir\README.txt" -Encoding UTF8
            
            # Zip olu≈ütur
            Compress-Archive -Path "$tempDir\*" -DestinationPath "dist\$zipName" -Force
            Write-Host "‚úÖ Created dist\$zipName"
            
            # Temizlik
            Remove-Item $tempDir -Recurse -Force
          } else {
            Write-Host "‚ùå Executable not found for packaging"
            exit 1
          }

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-${{ needs.pre-checks.outputs.version }}-windows
          path: |
            dist/*.zip
            dist/*.exe
            dist/*-setup.exe
          retention-days: 30
          if-no-files-found: error

      - name: Generate SHA256
        shell: pwsh
        run: |
          $files = Get-ChildItem "dist" -Include *.zip, *.exe -Recurse
          $shaContent = ""
          
          foreach ($file in $files) {
            $hash = (Get-FileHash $file.FullName -Algorithm SHA256).Hash
            $shaContent += "$hash  $($file.Name)`n"
          }
          
          $shaContent | Out-File -FilePath "dist\SHA256SUMS.txt" -Encoding UTF8
          Write-Host "üìù SHA256 Checksums:"
          Get-Content "dist\SHA256SUMS.txt"

  create-release:
    name: Create GitHub Release
    needs: [pre-checks, build-windows]
    runs-on: ubuntu-latest
    if: needs.pre-checks.outputs.is_release == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      
      - name: Display artifacts
        run: |
          echo "üì¶ Downloaded artifacts:"
          find ./artifacts -type f -name "*.exe" -o -name "*.zip" -o -name "*.txt" | while read file; do
            echo "  - $(basename $file) ($(du -h $file | cut -f1))"
          done
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.pre-checks.outputs.version }}
          name: "Bupili√á ${{ needs.pre-checks.outputs.version }}"
          draft: false
          prerelease: ${{ github.event.inputs.prerelease || false }}
          generate_release_notes: true
          body: |
            ## üéâ Bupili√á ƒ∞≈ületme Y√∂netim Sistemi
            
            ### üì¶ ƒ∞ndirmeler
            - **Windows (64-bit):** `BupiliC-${{ needs.pre-checks.outputs.version }}-windows-x64.zip`
            
            ### üöÄ Kurulum
            1. ZIP dosyasƒ±nƒ± indirin
            2. ƒ∞stediƒüiniz klas√∂re √ßƒ±kartƒ±n
            3. `BupiliC.exe` dosyasƒ±nƒ± √ßalƒ±≈ütƒ±rƒ±n
            
            ### ‚ú® √ñzellikler
            - ƒ∞skonto Hesaplama Mod√ºl√º
            - Karlƒ±lƒ±k Analizi Mod√ºl√º
            - M√º≈üteri Kayƒ±p/Ka√ßak Kontrol√º
            - Ya≈ülandƒ±rma Raporlarƒ±
            
            ### üìã Sistem Gereksinimleri
            - Windows 7 SP1 veya √ºzeri
            - 64-bit i≈ületim sistemi
            - Minimum 2GB RAM
            - 100MB bo≈ü disk alanƒ±
            
            ### üîê SHA256 Checksums
            Dosya b√ºt√ºnl√ºƒü√ºn√º doƒürulamak i√ßin `SHA256SUMS.txt` dosyasƒ±nƒ± kontrol edin.
          files: |
            artifacts/**/*.zip
            artifacts/**/*.exe
            artifacts/**/SHA256SUMS.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
