name: üöÄ Build & Release Bupili√á

on:
  # Manual trigger
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: false
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

  # Automatic trigger on tags
  push:
    tags:
      - 'v*.*.*'
    branches:
      - main
      - develop

env:
  APP_NAME: BupiliC
  PYTHON_VERSION: '3.10'
  BUILD_TYPE: release

jobs:
  # ===============================================
  # PRE-BUILD CHECKS
  # ===============================================
  pre-checks:
    name: üîç Pre-build Validation
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_release: ${{ steps.check.outputs.is_release }}
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: üêç Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: üìã Check files exist
      run: |
        echo "üîç Checking critical files..."
        test -f BUPILIC_ANA_PROGRAM.py || exit 1
        test -f requirements.txt || exit 1
        test -d ISKONTO_HESABI || exit 1
        test -d KARLILIK_ANALIZI || exit 1
        test -d Musteri_Sayisi_Kontrolu || exit 1
        test -d YASLANDIRMA || exit 1
        echo "‚úÖ All critical files found"

    - name: üè∑Ô∏è Determine version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        elif [[ "${{ github.event.inputs.version }}" != "" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        elif [[ -f VERSION ]]; then
          VERSION="v$(cat VERSION)"
        else
          VERSION="v1.0.0-$(date +'%Y%m%d')-${GITHUB_SHA:0:7}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "üè∑Ô∏è Version: $VERSION"

    - name: ‚úÖ Release check
      id: check
      run: |
        if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/tags/* ]]; then
          echo "is_release=true" >> $GITHUB_OUTPUT
          echo "üéâ This is a release build"
        else
          echo "is_release=false" >> $GITHUB_OUTPUT
          echo "üîß This is a development build"
        fi

  # ===============================================
  # WINDOWS BUILD
  # ===============================================
  build-windows:
    name: ü™ü Build Windows (${{ matrix.arch }})
    runs-on: windows-latest
    needs: pre-checks
    timeout-minutes: 60
    
    strategy:
      matrix:
        arch: [x64]
        include:
          - arch: x64
            python-arch: x64
    
    steps:
    - name: üì• Checkout repository  
      uses: actions/checkout@v4

    - name: üêç Setup Python ${{ env.PYTHON_VERSION }} (${{ matrix.python-arch }})
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        architecture: ${{ matrix.python-arch }}

    - name: üîß Install build dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install pyinstaller==6.3.0
        pip install pillow>=10.1.0

    - name: üì¶ Install application dependencies
      run: |
        echo "üì¶ Installing dependencies for ${{ matrix.arch }}..."
        
        # T√ºm gerekli paketleri explicit olarak y√ºkle
        pip install customtkinter==5.2.2
        pip install pandas==2.1.4
        pip install numpy==1.24.3
        pip install openpyxl==3.1.2
        pip install matplotlib==3.7.2
        pip install psutil==5.9.6
        pip install Pillow==10.1.0
        pip install xlsxwriter==3.1.9
        pip install xlrd==2.0.1
        pip install xlwt==1.3.0
        pip install seaborn==0.13.2

    - name: üé® Convert PNG to ICO
      shell: python
      run: |
        import os
        from PIL import Image
        
        def convert_png_to_ico():
            png_path = "icon/bupilic_logo.png"
            ico_path = "build/app_icon.ico"
            
            os.makedirs("build", exist_ok=True)
            
            if os.path.exists(png_path):
                try:
                    img = Image.open(png_path)
                    if img.mode != 'RGBA':
                        img = img.convert('RGBA')
                    
                    sizes = [(16,16), (32,32), (48,48), (64,64), (128,128), (256,256)]
                    icons = []
                    
                    for size in sizes:
                        resized = img.resize(size, Image.Resampling.LANCZOS)
                        icons.append(resized)
                    
                    icons[0].save(ico_path, format='ICO', sizes=[icon.size for icon in icons])
                    print(f"[SUCCESS] Icon converted: {ico_path}")
                    
                except Exception as e:
                    print(f"[ERROR] Icon conversion failed: {e}")
                    img = Image.new('RGBA', (64, 64), (42, 157, 143, 255))
                    img.save(ico_path, format='ICO')
                    print(f"[INFO] Created placeholder icon: {ico_path}")
            else:
                print(f"[WARNING] PNG icon not found: {png_path}")
                img = Image.new('RGBA', (64, 64), (42, 157, 143, 255))
                img.save(ico_path, format='ICO')
                print(f"[INFO] Created default icon: {ico_path}")
        
        convert_png_to_ico()

    - name: üìù Create debug script
      run: |
        # Hata ayƒ±klama i√ßin basit bir script olu≈ütur
        $debugScript = @"
import os
import sys
import traceback

print("Python path:", sys.path)
print("Current working directory:", os.getcwd())
print("Files in current directory:", os.listdir('.'))

# Mod√ºlleri test et
try:
    import customtkinter
    print("customtkinter imported successfully")
except ImportError as e:
    print(f"customtkinter import failed: {e}")

try:
    import pandas
    print("pandas imported successfully")
except ImportError as e:
    print(f"pandas import failed: {e}")

try:
    import matplotlib
    print("matplotlib imported successfully")
except ImportError as e:
    print(f"matplotlib import failed: {e}")

input("Press Enter to exit...")
"@
        
        $debugScript | Out-File -FilePath "debug_test.py" -Encoding UTF8

    - name: üî® Build with detailed spec file
      run: |
        # Detaylƒ± spec dosyasƒ± olu≈ütur
        $specContent = @'
# -*- mode: python ; coding: utf-8 -*-
import sys
import os
from pathlib import Path

block_cipher = None

# Uygulama bilgileri
app_name = "${{ env.APP_NAME }}"
main_script = "BUPILIC_ANA_PROGRAM.py"
icon_path = "build/app_icon.ico"

# Data files - t√ºm mod√ºl dosyalarƒ±nƒ± explicit olarak ekle
datas = [
    ('ISKONTO_HESABI/*.py', 'ISKONTO_HESABI'),
    ('ISKONTO_HESABI/*.txt', 'ISKONTO_HESABI'),
    ('KARLILIK_ANALIZI/*.py', 'KARLILIK_ANALIZI'),  
    ('KARLILIK_ANALIZI/*.txt', 'KARLILIK_ANALIZI'),
    ('Musteri_Sayisi_Kontrolu/*.py', 'Musteri_Sayisi_Kontrolu'),
    ('Musteri_Sayisi_Kontrolu/*.txt', 'Musteri_Sayisi_Kontrolu'),
    ('YASLANDIRMA/*.py', 'YASLANDIRMA'),
    ('YASLANDIRMA/*.txt', 'YASLANDIRMA'),
    ('icon/*.png', 'icon'),
    ('icon/*.ico', 'icon'),
]

# T√ºm hidden import'lar
hiddenimports = [
    'customtkinter',
    'tkinter',
    'tkinter.filedialog',
    'tkinter.messagebox',
    'PIL',
    'PIL.Image',
    'PIL.ImageTk',
    'PIL._tkinter_finder',
    'pandas',
    'numpy',
    'matplotlib',
    'matplotlib.backends',
    'matplotlib.backends.backend_tkagg',
    'matplotlib.pyplot',
    'seaborn',
    'openpyxl',
    'xlsxwriter',
    'xlrd',
    'xlwt',
    'psutil',
    'subprocess',
    'threading',
    'json',
    'logging',
    'locale',
    'datetime',
    'os',
    'sys',
    'pathlib',
    're',
    'collections',
    'itertools',
    'functools',
    'threading',
    'time',
    'calendar',
    'csv',
    'io',
    'base64',
    'hashlib',
    'random',
    'statistics',
    'math',
]

# Ek binary'ler
binaries = []

# Runtime hooks
runtime_hooks = []

# Exclude edilecek mod√ºller
excludes = [
    'test',
    'tests',
    'unittest',
    'distutils',
    'setuptools',
    'pandas.tests',
    'numpy.tests',
    'matplotlib.tests',
]

a = Analysis(
    [main_script],
    pathex=[],
    binaries=binaries,
    datas=datas,
    hiddenimports=hiddenimports,
    hookspath=[],
    hooksconfig={},
    runtime_hooks=runtime_hooks,
    excludes=excludes,
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.zipfiles,
    a.datas,
    [],
    name=app_name,
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=False,
    upx_exclude=[],
    runtime_tmpdir=None,
    console=False,
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
    icon=icon_path,
    version_file=None,
)
'@

        $specContent = $specContent -replace '\${{ env.APP_NAME }}', $env:APP_NAME
        $specContent | Out-File -FilePath "build/bupilic.spec" -Encoding UTF8
        echo "üìù Detailed spec file created"

    - name: üèóÔ∏è Build executable using spec file
      timeout-minutes: 45
      run: |
        echo "üî® Building using spec file..."
        
        # Spec dosyasƒ±nƒ± kullanarak build yap
        pyinstaller build/bupilic.spec --clean --noconfirm --log-level=DEBUG
        
        echo "‚úÖ Build completed successfully!"

    - name: üß™ Test the executable
      run: |
        echo "üß™ Testing executable..."
        
        $exePath = "dist/${{ env.APP_NAME }}/${{ env.APP_NAME }}.exe"
        if (Test-Path $exePath) {
            echo "‚úÖ Executable found: $exePath"
            $size = (Get-Item $exePath).Length / 1MB
            echo "üìä Size: $([math]::Round($size, 2)) MB"
            
            # ƒ∞√ßerik kontrol√º
            echo "üìÅ Contents of dist folder:"
            Get-ChildItem "dist/${{ env.APP_NAME }}" -Recurse | Select-Object Name, Length | Format-Table -AutoSize
            
            # _internal klas√∂r√º kontrol√º
            if (Test-Path "dist/${{ env.APP_NAME }}/_internal") {
                echo "‚úÖ _internal folder exists"
                echo "üì¶ Contents of _internal:"
                Get-ChildItem "dist/${{ env.APP_NAME }}/_internal" | Select-Object Name | Format-Table -AutoSize
            } else {
                echo "‚ùå _internal folder missing - this will cause module errors"
            }
        } else {
            echo "‚ùå Executable not found at expected path"
        }

    - name: üì¶ Package for distribution
      run: |
        $version = "${{ needs.pre-checks.outputs.version }}"
        $distDir = "dist/${{ env.APP_NAME }}"
        $outputName = "${{ env.APP_NAME }}-$version-windows-${{ matrix.arch }}"
        
        if (Test-Path $distDir) {
            # T√ºm dosyalarƒ± ZIP yap
            Compress-Archive -Path "$distDir/*" -DestinationPath "dist/$outputName.zip" -Force
            echo "üì¶ Created ZIP package: dist/$outputName.zip"
            
            # Ana executable'ƒ± da kopyala
            Copy-Item "$distDir/${{ env.APP_NAME }}.exe" "dist/$outputName.exe"
            echo "üì¶ Created standalone executable: dist/$outputName.exe"
        }

    - name: üìã Generate build info
      run: |
        $buildInfo = @{
          version = "${{ needs.pre-checks.outputs.version }}"
          architecture = "${{ matrix.arch }}"
          python_version = "${{ env.PYTHON_VERSION }}"
          build_time = Get-Date -Format "yyyy-MM-dd HH:mm:ss UTC"
          commit = "${{ github.sha }}"
          branch = "${{ github.ref_name }}"
          build_type = "onedir"
          modules_included = "all"
          size_mb = [math]::Round((Get-ChildItem "dist/${{ env.APP_NAME }}" -Recurse | Measure-Object -Property Length -Sum).Sum / 1MB, 2)
        }
        
        $buildInfo | ConvertTo-Json | Out-File -FilePath "dist/build-info.json" -Encoding UTF8
        echo "üìã Build info generated"

    - name: üì§ Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: BupiliC-${{ matrix.arch }}-${{ needs.pre-checks.outputs.version }}
        path: |
          dist/*.exe
          dist/*.zip
          dist/*.json
        retention-days: 30
        compression-level: 9

  # ===============================================
  # CREATE RELEASE
  # ===============================================
  create-release:
    name: üéâ Create Release
    runs-on: ubuntu-latest
    needs: [pre-checks, build-windows]
    if: needs.pre-checks.outputs.is_release == 'true'
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4

    - name: üì• Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: üìã Generate release notes
      run: |
        cat > release-notes.md << 'EOF'
        ## üöÄ Bupili√á ƒ∞≈ületme Y√∂netim Sistemi - ${{ needs.pre-checks.outputs.version }}
        
        ### üìä √ñzellikler
        - ‚úÖ T√ºm mod√ºller dahil (ƒ∞skonto, Karlƒ±lƒ±k, M√º≈üteri Analizi, Ya≈ülandƒ±rma)
        - ‚úÖ Windows uyumluluƒüu
        - ‚úÖ Tek dosya portable
        - ‚úÖ Modern aray√ºz
        
        ### üöÄ Kurulum
        1. ZIP dosyasƒ±nƒ± indirin ve √ßƒ±karƒ±n
        2. `BupiliC.exe` dosyasƒ±nƒ± √ßalƒ±≈ütƒ±rƒ±n
        3. Varsayƒ±lan ≈üifre: `bupilic2024`
        
        ### üìû Destek
        - Hata durumunda log dosyasƒ± kontrol edin
        - GitHub Issues: sorun bildirin
        EOF

    - name: üì¶ Prepare release assets
      run: |
        mkdir -p release-assets
        find ./artifacts -name "*.exe" -o -name "*.zip" -exec cp {} release-assets/ \;
        echo "üì¶ Release assets prepared"

    - name: üéâ Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.pre-checks.outputs.version }}
        name: "Bupili√á ${{ needs.pre-checks.outputs.version }}"
        body_file: release-notes.md
        files: release-assets/*
        prerelease: ${{ github.event.inputs.prerelease || false }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ===============================================
  # CLEANUP
  # ===============================================
  cleanup:
    name: üßπ Cleanup
    runs-on: ubuntu-latest
    needs: [build-windows, create-release]
    if: always()
    
    steps:
    - name: üßπ Clean up
      run: echo "‚úÖ Build process completed"
