name: Build & Release BupiliC

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: false
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

  push:
    tags:
      - 'v*'
    branches:
      - main

env:
  APP_NAME: BupiliC
  PYTHON_VERSION: '3.10'

jobs:
  pre-checks:
    name: Pre-build Validation
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_release: ${{ steps.check.outputs.is_release }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Check files exist
      run: |
        if [ ! -f "BUPILIC_ANA_PROGRAM.py" ]; then exit 1; fi
        if [ ! -f "requirements.txt" ]; then exit 1; fi
        if [ ! -d "ISKONTO_HESABI" ]; then exit 1; fi
        if [ ! -d "KARLILIK_ANALIZI" ]; then exit 1; fi
        if [ ! -d "Musteri_Sayisi_Kontrolu" ]; then exit 1; fi
        if [ ! -d "YASLANDIRMA" ]; then exit 1; fi

    - name: Determine version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        elif [[ -n "${{ github.event.inputs.version }}" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="v1.0.0-$(date +'%Y%m%d')-${GITHUB_SHA:0:7}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Release check
      id: check
      run: |
        if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/tags/* ]]; then
          echo "is_release=true" >> $GITHUB_OUTPUT
        else
          echo "is_release=false" >> $GITHUB_OUTPUT
        fi

  build-windows:
    name: Build Windows
    runs-on: windows-latest
    needs: pre-checks
    timeout-minutes: 60
    
    steps:
    - name: Checkout repository  
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install build dependencies
      run: |
        pip install pyinstaller==6.3.0
        pip install pillow

    - name: Install application dependencies
      run: |
        echo "Installing all dependencies..."
        
        # Önce requirements.txt'den yükle
        pip install -r requirements.txt
        
        # Versiyonları kontrol et (Unicode karakterleri kaldır)
        python -c "
        try:
            import pandas as pd
            import numpy as np
            import pdfplumber
            import customtkinter as ctk
            print('Pandas:', pd.__version__)
            print('NumPy:', np.__version__)
            print('PDFPlumber:', getattr(pdfplumber, '__version__', 'unknown'))
            print('CustomTkinter:', getattr(ctk, '__version__', 'unknown'))
        except Exception as e:
            print('Error:', e)
        "

    - name: Build with PyInstaller
      run: |
        pyinstaller BupiliC.spec --noconfirm

    - name: Test the executable
      run: |
        $exePath = "dist\${{ env.APP_NAME }}\${{ env.APP_NAME }}.exe"
        if (Test-Path $exePath) {
            echo "Executable found: $exePath"
        }

    - name: Package for distribution
      run: |
        $version = "${{ needs.pre-checks.outputs.version }}"
        $distDir = "dist\${{ env.APP_NAME }}"
        $outputName = "${{ env.APP_NAME }}-$version-windows-x64"
        
        if (Test-Path $distDir) {
            Compress-Archive -Path "$distDir\*" -DestinationPath "dist\$outputName.zip" -Force
            Copy-Item "$distDir\${{ env.APP_NAME }}.exe" "dist\$outputName.exe"
        }

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: BupiliC-${{ needs.pre-checks.outputs.version }}
        path: dist/*
        retention-days: 30

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [pre-checks, build-windows]
    if: needs.pre-checks.outputs.is_release == 'true'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.pre-checks.outputs.version }}
        name: "BupiliC ${{ needs.pre-checks.outputs.version }}"
        files: artifacts/*
        prerelease: ${{ github.event.inputs.prerelease || false }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
